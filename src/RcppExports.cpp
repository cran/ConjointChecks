// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CCIterate
List CCIterate(int nIter, NumericMatrix old, NumericMatrix old_ll, bool single, int burn, IntegerMatrix N, NumericMatrix n);
RcppExport SEXP _ConjointChecks_CCIterate(SEXP nIterSEXP, SEXP oldSEXP, SEXP old_llSEXP, SEXP singleSEXP, SEXP burnSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type old(oldSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type old_ll(old_llSEXP);
    Rcpp::traits::input_parameter< bool >::type single(singleSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CCIterate(nIter, old, old_ll, single, burn, N, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ConjointChecks_CCIterate", (DL_FUNC) &_ConjointChecks_CCIterate, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ConjointChecks(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
